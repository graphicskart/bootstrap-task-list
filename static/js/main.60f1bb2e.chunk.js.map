{"version":3,"sources":["assets/images/user1.png","components/TaskList.js","components/Task.js","components/Tag.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","tasks","title","month","priority","image","require","TaskList","react_default","a","createElement","Col","xs","Row","className","Button","variant","map","task","key","Task_Task","Object","assign","Component","Task","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleState","setState","active","state","_this$props","_this$props$title","_this$props$month","_this$props$priority","_this$props$image","sm","concat","onClick","components_Tag","src","Tag","_props$title","high","low","med","toLowerCase","App","Container","TaskList_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60f1bb2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user1.c716d648.png\";","import React, { Component } from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport { Task } from \"../components\";\n\nconst tasks = [\n  {\n    title: \"Recruit team of stronauts\",\n    month: \"Sept\",\n    priority: \"High\",\n    image: require(\"../assets/images/user1.png\")\n  },\n  {\n    title: \"Purchase supplies and spacecrafts\",\n    month: \"Sept\",\n    priority: \"Low\",\n    image: require(\"../assets/images/user1.png\")\n  },\n  {\n    title: \"Design flag to place on moon\",\n    month: \"Sept\",\n    priority: \"Med\",\n    image: require(\"../assets/images/user1.png\")\n  }\n];\n\nexport default class TaskList extends Component {\n  render() {\n    return (\n      <Col xs={12}>\n        <Row>\n          <Col xs={12} className=\"form-group\">\n            <Button variant=\"outline-success\">Add Task</Button>\n          </Col>\n          <Col xs={12} className=\"form-group\">\n            {tasks.map((task, key) => (\n              <Task key={key} {...task} />\n            ))}\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Tag } from \"../components\";\n\nexport default class Task extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: false\n    };\n  }\n\n  toggleState = () => {\n    this.setState({\n      active: !this.state.active\n    });\n  };\n\n  render() {\n    const { title = \"\", month = \"\", priority = \"\", image = \"\" } = this.props;\n    return (\n      <Col xs={12} className=\"task\">\n        <Row>\n          <Col xs={12}>\n            <Row>\n              <Col xs={12} sm={1}>\n                <Row>\n                  <i\n                    className={`${\n                      this.state.active ? \"fas\" : \"far\"\n                    } fa-check-circle`}\n                    onClick={this.toggleState}\n                  />\n                </Row>\n              </Col>\n              <Col xs={12} sm={7} className=\"text\">\n                {title}\n              </Col>\n              <Col xs={12} sm={1} className=\"text\">\n                {month}\n              </Col>\n              <Col xs={12} sm={2}>\n                <Tag title={priority} />\n              </Col>\n              <Col xs={12} sm={1} className=\"no-padding\">\n                <img className=\"image float-right\" src={image} />\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n","import React from \"react\";\n\nconst Tag = props => {\n  const { title = \"\" } = props;\n  const priorities = {\n    high: \"bg-danger\",\n    low: \"bg-info\",\n    med: \"bg-warning\"\n  };\n  return (\n    <span className={`tag float-right ${priorities[title.toLowerCase()]}`}>\n      {title}\n    </span>\n  );\n};\n\nexport default Tag;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Container, Col } from \"react-bootstrap\";\nimport { TaskList } from \"./components\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Col xs={12} sm={8} className=\"outer-box\">\n          <TaskList />\n        </Col>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}